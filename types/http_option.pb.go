// Code generated by protoc-gen-go. DO NOT EDIT.
// source: http_option.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HTTPOption struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// GET, POST, PUT, DELETE, PATCH ..., default GET
	Method string `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	// custom headers
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// random user-agent
	RandUA    bool  `protobuf:"varint,4,opt,name=randUA" json:"randUA,omitempty"`
	UseProxy  bool  `protobuf:"varint,5,opt,name=useProxy" json:"useProxy,omitempty"`
	Goroutine int64 `protobuf:"varint,6,opt,name=goroutine" json:"goroutine,omitempty"`
	// every httpclient send reqeusts.
	Count int64 `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`
}

func (m *HTTPOption) Reset()                    { *m = HTTPOption{} }
func (m *HTTPOption) String() string            { return proto.CompactTextString(m) }
func (*HTTPOption) ProtoMessage()               {}
func (*HTTPOption) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *HTTPOption) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HTTPOption) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HTTPOption) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPOption) GetRandUA() bool {
	if m != nil {
		return m.RandUA
	}
	return false
}

func (m *HTTPOption) GetUseProxy() bool {
	if m != nil {
		return m.UseProxy
	}
	return false
}

func (m *HTTPOption) GetGoroutine() int64 {
	if m != nil {
		return m.Goroutine
	}
	return 0
}

func (m *HTTPOption) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type HTTPJob struct {
	Uuid   string      `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Option *HTTPOption `protobuf:"bytes,2,opt,name=option" json:"option,omitempty"`
}

func (m *HTTPJob) Reset()                    { *m = HTTPJob{} }
func (m *HTTPJob) String() string            { return proto.CompactTextString(m) }
func (*HTTPJob) ProtoMessage()               {}
func (*HTTPJob) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *HTTPJob) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *HTTPJob) GetOption() *HTTPOption {
	if m != nil {
		return m.Option
	}
	return nil
}

func init() {
	proto.RegisterType((*HTTPOption)(nil), "ckeyer.api.HTTPOption")
	proto.RegisterType((*HTTPJob)(nil), "ckeyer.api.HTTPJob")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HTTPAttacker service

type HTTPAttackerClient interface {
	StartHTTP(ctx context.Context, in *HTTPOption, opts ...grpc.CallOption) (*HTTPJob, error)
	StopHTTP(ctx context.Context, in *HTTPJob, opts ...grpc.CallOption) (*HTTPJob, error)
}

type hTTPAttackerClient struct {
	cc *grpc.ClientConn
}

func NewHTTPAttackerClient(cc *grpc.ClientConn) HTTPAttackerClient {
	return &hTTPAttackerClient{cc}
}

func (c *hTTPAttackerClient) StartHTTP(ctx context.Context, in *HTTPOption, opts ...grpc.CallOption) (*HTTPJob, error) {
	out := new(HTTPJob)
	err := grpc.Invoke(ctx, "/ckeyer.api.HTTPAttacker/StartHTTP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPAttackerClient) StopHTTP(ctx context.Context, in *HTTPJob, opts ...grpc.CallOption) (*HTTPJob, error) {
	out := new(HTTPJob)
	err := grpc.Invoke(ctx, "/ckeyer.api.HTTPAttacker/StopHTTP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HTTPAttacker service

type HTTPAttackerServer interface {
	StartHTTP(context.Context, *HTTPOption) (*HTTPJob, error)
	StopHTTP(context.Context, *HTTPJob) (*HTTPJob, error)
}

func RegisterHTTPAttackerServer(s *grpc.Server, srv HTTPAttackerServer) {
	s.RegisterService(&_HTTPAttacker_serviceDesc, srv)
}

func _HTTPAttacker_StartHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPAttackerServer).StartHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ckeyer.api.HTTPAttacker/StartHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPAttackerServer).StartHTTP(ctx, req.(*HTTPOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPAttacker_StopHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPAttackerServer).StopHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ckeyer.api.HTTPAttacker/StopHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPAttackerServer).StopHTTP(ctx, req.(*HTTPJob))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTTPAttacker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ckeyer.api.HTTPAttacker",
	HandlerType: (*HTTPAttackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartHTTP",
			Handler:    _HTTPAttacker_StartHTTP_Handler,
		},
		{
			MethodName: "StopHTTP",
			Handler:    _HTTPAttacker_StopHTTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http_option.proto",
}

func init() { proto.RegisterFile("http_option.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x4d, 0xd3, 0x26, 0xed, 0xb4, 0x07, 0x1d, 0xa5, 0x2c, 0xc5, 0x43, 0xa8, 0x97, 0x9c,
	0x72, 0xa8, 0x20, 0x52, 0xf0, 0x50, 0x41, 0x28, 0x05, 0xb1, 0xa4, 0xf5, 0xe2, 0x45, 0xd2, 0x66,
	0xb1, 0x21, 0x35, 0x1b, 0xb6, 0xb3, 0x62, 0xae, 0xfe, 0x0b, 0xff, 0xad, 0xec, 0x26, 0x35, 0x22,
	0xed, 0x6d, 0xdf, 0x9b, 0xf7, 0x0d, 0x79, 0x43, 0xe0, 0x6c, 0x43, 0x94, 0xbf, 0x8a, 0x9c, 0x12,
	0x91, 0x05, 0xb9, 0x14, 0x24, 0x10, 0xd6, 0x29, 0x2f, 0xb8, 0x0c, 0xa2, 0x3c, 0x19, 0x7e, 0x37,
	0x00, 0xa6, 0xcb, 0xe5, 0xfc, 0xc9, 0x04, 0xf0, 0x14, 0x6c, 0x25, 0xb7, 0xcc, 0xf2, 0x2c, 0xbf,
	0x13, 0xea, 0x27, 0xf6, 0xc1, 0x79, 0xe7, 0xb4, 0x11, 0x31, 0x6b, 0x18, 0xb3, 0x52, 0x78, 0x07,
	0xee, 0x86, 0x47, 0x31, 0x97, 0x3b, 0x66, 0x7b, 0xb6, 0xdf, 0x1d, 0x5d, 0x05, 0xf5, 0xda, 0xa0,
	0x5e, 0x19, 0x4c, 0xcb, 0xd4, 0x43, 0x46, 0xb2, 0x08, 0xf7, 0x8c, 0x5e, 0x2b, 0xa3, 0x2c, 0x7e,
	0x9e, 0xb0, 0xa6, 0x67, 0xf9, 0xed, 0xb0, 0x52, 0x38, 0x80, 0xb6, 0xda, 0xf1, 0xb9, 0x14, 0x9f,
	0x05, 0x6b, 0x99, 0xc9, 0xaf, 0xc6, 0x4b, 0xe8, 0xbc, 0x09, 0x29, 0x14, 0x25, 0x19, 0x67, 0x8e,
	0x67, 0xf9, 0x76, 0x58, 0x1b, 0x78, 0x01, 0xad, 0xb5, 0x50, 0x19, 0x31, 0xd7, 0x4c, 0x4a, 0x31,
	0x18, 0x43, 0xef, 0xef, 0x07, 0xe8, 0x82, 0x29, 0x2f, 0xf6, 0x05, 0x53, 0x5e, 0x68, 0xee, 0x23,
	0xda, 0x2a, 0x5e, 0xf5, 0x2b, 0xc5, 0xb8, 0x71, 0x6b, 0x0d, 0x1f, 0xc1, 0xd5, 0x3d, 0x66, 0x62,
	0x85, 0x08, 0x4d, 0xa5, 0x92, 0xb8, 0xe2, 0xcc, 0x1b, 0x03, 0x70, 0xca, 0xb3, 0x1a, 0xb2, 0x3b,
	0xea, 0x1f, 0x3e, 0x40, 0x58, 0xa5, 0x46, 0x5f, 0x16, 0xf4, 0xb4, 0x3d, 0x21, 0x8a, 0xd6, 0x29,
	0x97, 0x38, 0x86, 0xce, 0x82, 0x22, 0x49, 0xda, 0xc4, 0x23, 0xf4, 0xe0, 0xfc, 0xbf, 0x3f, 0x13,
	0xab, 0xe1, 0x09, 0xde, 0x40, 0x7b, 0x41, 0x22, 0x37, 0xe8, 0xa1, 0xc8, 0x11, 0xee, 0xde, 0x7d,
	0x69, 0x51, 0x91, 0xf3, 0xdd, 0xca, 0x31, 0xff, 0xc2, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x27, 0x51, 0xa3, 0x78, 0x20, 0x02, 0x00, 0x00,
}
